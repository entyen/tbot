const { Bot, Keyboard, InlineKeyboard, session } = require("grammy")
const mongoose = require("mongoose")
const { P2P, Personal, Detector } = require("qiwi-sdk")
const axios = require("axios")

const fs = require("fs")
const tea = JSON.parse(fs.readFileSync("config.json", "utf-8"))
const bot = new Bot(tea.TOKEN)
const qiwi = new Personal(tea.QIWI_TOKEN, tea.QIWI_WALLET)
const { userSchem, balHisSchem } = require("./schema/data.js")
const userdb = mongoose.model("users", userSchem)
const balHisdb = mongoose.model("balhis", balHisSchem)
let lang = JSON.parse(fs.readFileSync(`./lang/ru.json`, "utf-8"))
const timestamp = Date.now() + 10800000
const priceX = 2

function initial() {
  return {
    up_bal: 0,
    vk_likes: 0,
    vk_viewers: 0,
    vk_folowers: 0,
    vk_repost: 0,
    tt_likes: 0,
    tt_viewers: 0,
    tt_folowers: 0,
    tt_comments: 0,
    tg_viewers: 0,
    tg_folowers: 0,
    ins_likes: 0,
    ins_viewers: 0,
    ins_folowers: 0,
    coupon: 0,
  }
}

bot.use(session({ initial }))

const keyboard = new Keyboard()
  .text(lang.profile)
  .text(lang.up_balk)
  .row()
  .text(lang.ref_system)
  .text(lang.wrap)
  .row()
  .text(lang.about_us)
  .text(lang.my_wrap)
  .row()
  .text(lang.tech_support)
  .row()

const prof_menu = new InlineKeyboard()
  .text(lang.pur_his, "pur_his")
  .text(lang.bal_his, "bal_his")
  .row()
  .text(lang.act_cup, "coupon")

const ref_menu = new InlineKeyboard()
  .text("–†–µ—Ñ–µ—Ä–∞–ª—ã –∏ –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π", "refer_users")
  .row()
  .text("–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º", "refer_url")
  .row()

const shop_wrap = new InlineKeyboard()
  .text(lang.vk, "vk_nakrutka")
  .text(lang.tt, "tt_nakrutka")
  .row()
  .text(lang.inst, "ins_nakrutka")
  .text(lang.tg, "tg_nakrutka")
  .row()
  .text(lang.close, "close")

const vk_keyboard = new InlineKeyboard()
  .text(lang.likes, "vk_likes")
  .row()
  .text(lang.viewers, "vk_viewers")
  .row()
  .text(lang.followers, "vk_folowers")
  .row()
  .text(lang.act_rep, "vk_repost")
  .row()
  .text(lang.back, "wp_back")

const tt_keyboard = new InlineKeyboard()
  .text(lang.likes, "tt_likes")
  .row()
  .text(lang.viewers, "tt_viewers")
  .row()
  .text(lang.followers, "tt_folowers")
  .row()
  .text(lang.comments, "tt_comments")
  .row()
  .text(lang.back, "wp_back")

const tg_keyboard = new InlineKeyboard()
  .text(lang.viewers, "tg_viewers")
  .row()
  .text(lang.followers, "tg_folowers")
  .row()
  .text(lang.back, "wp_back")

const ins_keyboard = new InlineKeyboard()
  .text(lang.likes, "ins_likes")
  .row()
  .text(lang.viewers, "ins_viewers")
  .row()
  .text(lang.followers, "ins_folowers")
  .row()
  .text(lang.back, "wp_back")

const cloze_ds = new InlineKeyboard().text(lang.close, "close")

bot.command("start", async (ctx) => {
  if (ctx.message.chat.id < 0) return
  cmf = ctx.message.from
  ctx.user = await userdb.findOne({ userid: cmf.id })
  const bsc = await userdb.countDocuments()
  const uid = 5271211 + bsc
  if (!ctx.user) {
    await userdb.create({
      id: uid,
      userid: cmf.id,
      username: cmf.username,
      lang: cmf.language_code,
      refer_id: ctx.match,
    })
    if (ctx.match) {
      const referUser = await userdb.findOne({ id: ctx.match })
      referUser.refer.unshift({ userid: uid })
      referUser.save()
    }
    await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${cmf.username || ""}`, {
      reply_markup: keyboard,
    })
    await bot.api.sendMessage(
      tea.ADMINGROUP,
      `üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id=${
        cmf.id
      }">${cmf.username || "–ë–µ–∑ –ò–º–µ–Ω–∏"}</a>\nüï∫ –†–µ—Ñ–µ—Ä–∞–ª: ${ctx.match || "–ù–µ—Ç"}`,
      { parse_mode: "HTML" }
    )
  } else {
    await ctx.reply("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º", {
      reply_markup: keyboard,
    })
  }
})

bot.command("check", async (ctx) => {
  try {
    ctx.user = await userdb.findOne({ userid: ctx.message?.from.id })
    const cmtA =
      +ctx.message?.text.split(" ")[1] ||
      ctx.message?.text.split(" ")[1].replace("@", "")
    if (ctx.user.acclvl < 7) return ctx.reply("–ù–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
    const user = Number(cmtA)
      ? await userdb.findOne({ userid: cmtA })
      : await userdb.findOne({ username: cmtA })
    if (!user) return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    console.log(user)
    const banCheck = user.acclvl < 0 ? "–î–∞" : user.acclvl > 0 ? "–ù–µ—Ç" : false
    ctx.reply(
      `ü§µ–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}\nüí∏–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.bal}\n‚ùå–ë–∞–Ω –∞–∫–∫–∞—É–Ω—Ç–∞: ${banCheck}\nüí∞–ü–æ–∫—É–ø–æ–∫ –≤ –±–æ—Ç–µ: ${user.wrapHist.length}`
    )
  } catch (e) {
    ctx.reply(`–û—à–∏–±–∫–∞: ${e}`)
  }
})

bot.command("test", async (ctx) => {
  try {
    ctx.user = await userdb.findOne({ userid: ctx.message?.from.id })
    const cmtA = ctx.message?.text.slice(6)
    if (ctx.user.acclvl < 7) return ctx.reply("–ù–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
    const rq = await axios.request(
      `https://wiq.ru/api/?key=${tea.WIQ_TOKEN}&action=services`
    )
    const rt = rq.data.filter(x => x.ID == 4)
    ctx.reply(rt[0].description)
  } catch (e) {
    console.log(e)
    ctx.reply(`–û—à–∏–±–∫–∞: ${e}`)
  }
})

bot.command("order", async (ctx) => {
  try {
    ctx.user = await userdb.findOne({ userid: ctx.message?.from.id })
    const cmtA = +ctx.message?.text.slice(6)
    if (ctx.user.acclvl < 7) return ctx.reply("–ù–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
    const rq = await axios.request(
      `https://wiq.ru/api/?key=${tea.WIQ_TOKEN}&action=status&order=${cmtA}`
    )
    const statusParse =
      rq.data.status == "Completed"
        ? "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        : rq.data.status == "In progress"
        ? "–ê–∫—Ç–∏–≤–µ–Ω"
        : rq.data.status == "Pending"
        ? "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
        : rq.data.status == "Partial"
        ? "–ü—Ä–µ—Ä–≤–∞–Ω"
        : rq.data.status == "Canceled"
        ? "–û—Ç–º–µ–Ω–µ–Ω"
        : rq.data.status
    ctx.reply(`–ó–∞–∫–∞–∑ ‚Ññ${cmtA}\n–°—Ç–∞—Ç—É—Å: ${statusParse}\n–°—Å—ã–ª–∫–∞: ${rq.data.link}\n–¢–∏–ø –ó–∞–∫–∞–∑–∞: ${rq.data.service}\n–ö–æ–ª-–≤–æ: ${rq.data.quantity}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${rq.data.charge}`, { disable_web_page_preview: true })
  } catch (e) {
    console.log(e)
    ctx.reply(`–û—à–∏–±–∫–∞: ${e}`)
  }
})

bot.command("sendall", async (ctx) => {
  try {
    ctx.user = await userdb.findOne({ userid: ctx.message?.from.id })
    const cmtA = ctx.message?.text.slice(9)
    if (ctx.user.acclvl < 7) return ctx.reply("–ù–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
    const user = await userdb.find({})
    user.forEach((x, y, z) => {
      bot.api.sendMessage(user[y].userid, cmtA)
    })
  } catch (e) {
    ctx.reply(`–û—à–∏–±–∫–∞: ${e}`)
  }
})

bot.command("stat", async (ctx) => {
  try {
    ctx.user = await userdb.findOne({ userid: ctx.message?.from.id })
    if (ctx.user.acclvl < 7) return ctx.reply("–ù–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
    const user = await userdb.find({})
    const balance = await balHisdb.find({})
    const balComp = balance.filter((x) => x.status === "Complite")
    balComp.balUp = 0
    const balMonth = balComp.filter(
      (x) => x.reqDate.getTime() > timestamp - 2592000000
    )
    balMonth.balUp = 0
    let result = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`
    balComp.forEach((x, y, z) => {
      balComp.balUp += balComp[y].balUp
      balMonth.balUp += balMonth[y].balUp
    })
    result += `üë•–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: ${user.length} \nüåÜ–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü: ${balMonth.balUp} ‚ÇΩ\nüí∞–û–±—â–∞—è —Å—É–º–º–∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: ${balComp.balUp} ‚ÇΩ`
    ctx.reply(result)
  } catch (e) {
    ctx.reply(`–û—à–∏–±–∫–∞: ${e}`)
  }
})

bot.command("give", async (ctx) => {
  try {
    ctx.user = await userdb.findOne({ userid: ctx.message?.from.id })
    const cmtA =
      +ctx.message?.text.split(" ")[1] ||
      ctx.message?.text.split(" ")[1].replace("@", "")
    const cmtB = +ctx.message?.text.split(" ")[2]
    if (!Number(cmtB) || ctx.user.acclvl < 7)
      return ctx.reply("–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
    const user = Number(cmtA)
      ? await userdb.findOne({ userid: cmtA })
      : await userdb.findOne({ username: cmtA })
    if (!user) return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    ctx.reply(
      `${
        cmtB > 0
          ? "–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞"
          : "–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–∏–∂–µ–Ω –Ω–∞"
      } ${cmtB} P`
    )
    bot.api.sendMessage(
      user.userid,
      `${
        cmtB > 0
          ? "üí∞–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞"
          : "‚öúÔ∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–Ω–∏–∑–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞"
      } ${cmtB} P`
    )
    user.bal = user.bal + cmtB
    await user.save()
  } catch (e) {
    ctx.reply(`–û—à–∏–±–∫–∞: ${e}`)
  }
})

bot.command("setAccess", async (ctx) => {
  try {
    ctx.user = await userdb.findOne({ userid: ctx.message?.from.id })
    const cmtA =
      +ctx.message?.text.split(" ")[1] ||
      ctx.message?.text.split(" ")[1].replace("@", "")
    const cmtB = +ctx.message?.text.split(" ")[2]
    if (!Number.isInteger(cmtB) || ctx.user.acclvl < 7)
      return ctx.reply("–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
    if (cmtB < -1 || cmtB > 7) return ctx.reply("–ù–µ–ª—å–∑—è –º–µ–Ω—å—à–µ -1 –∏–ª–∏ –±–æ–ª—å—à–µ 7")
    const ParceAccesId =
      cmtB == -1
        ? "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"
        : cmtB == 0
        ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        : cmtB == 1
        ? "–ë—Ä–æ–Ω–∑–æ–≤—ã–π"
        : cmtB == 2
        ? "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π"
        : cmtB == 3
        ? "–ó–æ–ª–æ—Ç–æ–π"
        : cmtB == 4
        ? "–î–ª—è —Å–≤–æ–∏—Ö"
        : cmtB == 5
        ? "–†–µ–∑–µ—Ä–≤"
        : cmtB == 6
        ? "–†–µ–∑–µ—Ä–≤"
        : cmtB == 7
        ? "–°–æ–∑–¥–∞—Ç–µ–ª—å"
        : "Any"
    const user = Number(cmtA)
      ? await userdb.findOne({ userid: cmtA })
      : await userdb.findOne({ username: cmtA })
    if (!user) return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    ctx.reply(`–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å ${ParceAccesId}`)
    bot.api.sendMessage(
      user.userid,
      `–í–∞—à —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ —Ç–µ–ø–µ—Ä—å ${ParceAccesId}`
    )
    user.acclvl = cmtB
    await user.save()
  } catch (e) {
    ctx.reply(`–û—à–∏–±–∫–∞: ${e}`)
    return
  }
})

bot.callbackQuery("refer_users", async (ctx) => {
  const cmt = +ctx.update.callback_query.message.text.split("=")[1]
  ctx.answerCallbackQuery({ text: "" })
  let user = await userdb.find({ id: cmt })
  let result = `–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n`
  user.refer = user[0].refer
  for (i = 0; i < user.refer.length; i++) {
    result += `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: #${user.refer[i].userid}\n–°—É–º–º–∞: ${user.refer[i].gainrur} ‚ÇΩ\n`
  }
  result += `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  ctx.editMessageText(result)
})

bot.callbackQuery("pur_his", async (ctx) => {
  const cmt = ctx.from?.id
  ctx.answerCallbackQuery({ text: "" })
  const user = await userdb.findOne({ userid: cmt })
  let result = `–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n`
  for (i = 0; i < user.wrapHist.length; i++) {
    const orderid = user.wrapHist[i].orderid
    const rq = await axios.request(
      `https://wiq.ru/api/?key=${tea.WIQ_TOKEN}&action=status&order=${orderid}`
    )
    const urlParse = rq.data.link.split("/")[3]
    const statusParse =
      rq.data.status == "Completed"
        ? "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        : rq.data.status == "In progress"
        ? "–ê–∫—Ç–∏–≤–µ–Ω"
        : rq.data.status == "Pending"
        ? "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
        : rq.data.status == "Partial"
        ? "–ü—Ä–µ—Ä–≤–∞–Ω"
        : rq.data.status == "Canceled"
        ? "–û—Ç–º–µ–Ω–µ–Ω"
        : rq.data.status
    result += `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\n–ò–¥: #${orderid}\n–î–∞—Ç–∞: ${user.wrapHist[
      i
    ].date.toLocaleString()}\n–°—Ç–∞—Ç—É—Å: ${statusParse}\n–°—Å—ã–ª–∫–∞: <a href="${
      rq.data.link
    }">${urlParse}</a>\n`
  }
  result += `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  ctx.editMessageText(result, {disable_web_page_preview: true, parse_mode: "HTML" })
})

bot.callbackQuery("refer_url", async (ctx) => {
  const referUrl = ctx.update.callback_query.message.text.split(" ")[16]
  ctx.editMessageText(`<code>${referUrl}</code>`, { parse_mode: "HTML" })
})

bot.callbackQuery("coupon", async (ctx) => {
  ctx.editMessageText("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–ø–æ–Ω")
  const session = ctx.session
  session.coupon++
})

bot.callbackQuery("up_bal", async (ctx) => {
  ctx.editMessageText("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
  const session = ctx.session
  session.up_bal++
})

async function checkPayments(ctx, trasid) {
  const commentID = Number(trasid)
  let trans = await balHisdb.findOne({ bid: trasid })
  let user = await userdb.findOne({ id: trans.id })
  let refer = await userdb.findOne({ id: user.refer_id })

  const { data } = await qiwi.getPaymentHistory({
    operation: Personal.TransactionType.IN,
    rows: 30,
  })

  const transactions = data.filter((txn) => txn.comment == commentID)
  const transaction = transactions[0]

  if (trans.status === "Complite")
    return ctx.answerCallbackQuery({
      text: `–ù–µ–ª—å–∑—è –¥–≤–∞ —Ä–∞–∑–∞ –Ω–∞—á–∏—Å–ª–∏—Ç—å –∑–∞ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É`,
    })
  if (trans.status === "Cancel")
    return ctx.answerCallbackQuery({
      text: `–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω`,
    })
  if (transaction === undefined) {
    ctx.answerCallbackQuery({ text: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Ññ${commentID} –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–æ` })
    return
  } else {
    ctx.editMessageText(`–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂\n –ö–æ—à–µ–ª–µ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${trans.balUp} ‚ÇΩ`)
    user.bal = user.bal + trans.balUp
    await user.save()
    trans.status = "Complite"
    await trans.save()
    if (refer) {
      refer.bal = refer.bal + trans.balUp * 0.05
      const refBal = refer.refer.filter((x) => x.userid == user.id)[0]
      refBal.gainrur = refBal.gainrur + trans.balUp * 0.05
      await refer.save()
    }
    await bot.api.sendMessage(
      tea.ADMINGROUP,
      `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Ññ${commentID}\n–°—É–º–º–∞: ${trans.balUp} ‚ÇΩ\n–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${
        trans.type
      }\n–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: ${trans.reqDate.toLocaleString("ru-RU")}\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @${
        user.username
      }\n–°—Ç–∞—Ç—É—Å: ${trans.status}`
    )
    return
  }
}

bot.callbackQuery("bal_his", async (ctx) => {
  const cmt = +ctx.update.callback_query.message.text
    .split(" ")[2]
    .match(/[0-9]/g)
    .join("")
  ctx.answerCallbackQuery({ text: "" })
  let balinfo = await balHisdb.find({ id: cmt })
  let result = `–í—Å–µ–≥–æ —É –í–∞—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:\n`
  balinfo = balinfo.filter((x) => x.status == "Complite")
  for (i = 0; i < balinfo.length; i++) {
    result += `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: #${balinfo[i].bid}\n–°—É–º–º–∞: ${
      balinfo[i].balUp
    } ‚ÇΩ\n–î–∞—Ç–∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${balinfo[i].reqDate.toLocaleString("ru-RU")}\n`
  }
  result += `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  ctx.editMessageText(result)
})

bot.callbackQuery("check_paym_v", async (ctx) => {
  const cmt = +ctx.update.callback_query.message.text
    .split(" ")[2]
    .match(/[0-9]/g)
    .join("")
  checkPayments(ctx, cmt)
})

bot.callbackQuery("check_paym_x", async (ctx) => {
  const cmt = +ctx.update.callback_query.message.text
    .split(" ")[2]
    .match(/[0-9]/g)
    .join("")
  let trans = await balHisdb.findOne({ bid: cmt })
  trans.status = "Cancel"
  trans.save()
  ctx.answerCallbackQuery({ text: "" })
  ctx.editMessageText(`–û—Ç–º–µ–Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Ññ${trans.bid}`)
})

bot.callbackQuery("in_dev", async (ctx) => {
  ctx.answerCallbackQuery({ text: "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" })
})

bot.callbackQuery("tg_nakrutka", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.replyWithPhoto(
    "https://media.discordapp.net/attachments/461187392074940417/935536232023326791/Telegram.jpg?width=847&height=281",
    {
      caption:
        "‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  Telegram\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢",
      reply_markup: tg_keyboard,
    }
  )
})

bot.callbackQuery("tg_viewers", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.reply(
    `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  üëÄ–ü—Ä–æ—Å–º–æ—Ç—Ä—ã Tg\nüí∞ –¶–µ–Ω–∞: ${
      0.01 * priceX
    } ‚ÇΩ \n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: \n –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 50 —à—Ç.\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1000000 —à—Ç.\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`,
    {
      reply_markup: cloze_ds,
    }
  )
  const session = ctx.session
  session.tg_viewers++
})

bot.callbackQuery("tg_folowers", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.reply(
    `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  üë§–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ Tg\nüí∞ –¶–µ–Ω–∞: ${
      0.04 * priceX
    } ‚ÇΩ \n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: \n –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 500 —à—Ç.\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10000 —à—Ç.\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  )
  const session = ctx.session
  session.tg_folowers++
})

bot.callbackQuery("ins_nakrutka", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.replyWithPhoto(
    "https://media.discordapp.net/attachments/461187392074940417/935536077035405312/instagram-wallpapercr.jpg?width=847&height=281",
    {
      caption:
        "‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  Instagram\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢",
      reply_markup: ins_keyboard,
    }
  )
})

bot.callbackQuery("ins_likes", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.reply(
    `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  ‚ù§Ô∏è‚Äçüî•–õ–∞–π–∫–∏ Inst\nüí∞ –¶–µ–Ω–∞: ${
      0.01 * priceX
    } ‚ÇΩ \n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: \n –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10 —à—Ç.\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 15000 —à—Ç.\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  )
  const session = ctx.session
  session.ins_likes++
})

bot.callbackQuery("ins_viewers", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.reply(
    `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  üëÄ–ü—Ä–æ—Å–º–æ—Ç—Ä—ã Inst\nüí∞ –¶–µ–Ω–∞: ${
      0.01 * priceX
    } ‚ÇΩ \n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: \n –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100 —à—Ç.\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1000000 —à—Ç.\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  )
  const session = ctx.session
  session.ins_viewers++
})

bot.callbackQuery("ins_folowers", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.reply(
    `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  üë§–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ Inst\nüí∞ –¶–µ–Ω–∞: ${
      0.01 * priceX
    } ‚ÇΩ \n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: \n –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10 —à—Ç.\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 50000 —à—Ç.\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  )
  const session = ctx.session
  session.ins_folowers++
})

bot.callbackQuery("tt_nakrutka", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.replyWithPhoto(
    "https://media.discordapp.net/attachments/461187392074940417/935535429460041748/14843332_0.jpg?width=847&height=281",
    {
      caption:
        "‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  Tik Tok\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢",
      reply_markup: tt_keyboard,
    }
  )
})

bot.callbackQuery("tt_likes", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.reply(
    `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  ‚ù§Ô∏è‚Äçüî•–õ–∞–π–∫–∏ TT\nüí∞ –¶–µ–Ω–∞: ${
      0.06 * priceX
    } ‚ÇΩ \n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: \n –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10 —à—Ç.\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100000 —à—Ç.\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  )
  const session = ctx.session
  session.tt_likes++
})

bot.callbackQuery("tt_viewers", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.reply(
    `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  üëÄ–ü—Ä–æ—Å–º–æ—Ç—Ä—ã TT\nüí∞ –¶–µ–Ω–∞: ${
      0.01 * priceX
    } ‚ÇΩ \n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: \n –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1000 —à—Ç.\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1000000000 —à—Ç.\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  )
  const session = ctx.session
  session.tt_viewers++
})

bot.callbackQuery("tt_folowers", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.reply(
    `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  üë§–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ TT\nüí∞ –¶–µ–Ω–∞: ${
      0.03 * priceX
    } ‚ÇΩ \n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: \n –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10 —à—Ç.\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100000 —à—Ç.\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  )
  const session = ctx.session
  session.tt_folowers++
})

bot.callbackQuery("tt_comments", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.reply(
    `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ TT\nüí∞ –¶–µ–Ω–∞: ${
      0.5 * priceX
    } ‚ÇΩ \n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: \n –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10 —à—Ç.\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1000 —à—Ç.\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  )
  const session = ctx.session
  session.tt_comments++
})

bot.callbackQuery("vk_nakrutka", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.replyWithPhoto(
    "https://cdn.discordapp.com/attachments/461187392074940417/935402968004579388/unknown.png",
    {
      caption:
        "‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  –í–ö–æ–Ω—Ç–∞–∫—Ç–µ\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢",
      reply_markup: vk_keyboard,
    }
  )
})

bot.callbackQuery("vk_likes", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.reply(
    `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  ‚ù§Ô∏è‚Äçüî•–õ–∞–π–∫–∏ VK\nüí∞ –¶–µ–Ω–∞: ${
      0.06 * priceX
    } ‚ÇΩ \n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: \n –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10 —à—Ç.\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 35000 —à—Ç.\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  )
  const session = ctx.session
  session.vk_likes++
})

bot.callbackQuery("vk_viewers", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.reply(
    `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  üëÄ–ü—Ä–æ—Å–º–æ—Ç—Ä—ã VK\nüí∞ –¶–µ–Ω–∞: ${
      0.04 * priceX
    } ‚ÇΩ \n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: \n –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 50 —à—Ç.\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 500000 —à—Ç.\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  )
  const session = ctx.session
  session.vk_viewers++
})

bot.callbackQuery("vk_folowers", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.reply(
    `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  üë§–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ VK\nüí∞ –¶–µ–Ω–∞: ${
      0.09 * priceX
    } ‚ÇΩ \n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: \n –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10 —à—Ç.\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 35000 —à—Ç.\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  )
  const session = ctx.session
  session.vk_folowers++
})

bot.callbackQuery("vk_repost", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.reply(
    `‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢\nüìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  üîÉ–†–µ–ø–æ—Å—Ç—ã VK\nüí∞ –¶–µ–Ω–∞: ${
      0.08 * priceX
    } ‚ÇΩ \n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: \n –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 10 —à—Ç.\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 35000 —à—Ç.\n‚Ä¢ ‚ïê‚ïê‚îÄ‚îÅ‚îÅ‚îÄ‚îÄ ‚´∑‚´∏ ‚îÄ‚îÄ‚ïê‚ïê‚îÄ‚îÅ‚îÅ ‚Ä¢`
  )
  const session = ctx.session
  session.vk_folowers++
})

bot.callbackQuery("wp_back", async (ctx) => {
  await ctx.deleteMessage().catch((e) => console.log(e))
  await ctx.reply("–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:", { reply_markup: shop_wrap })
})

bot.callbackQuery("close", async (ctx) => {
  ctx.editMessageText("–û—Ç–º–µ–Ω–µ–Ω–æ")
})

const nakrutka = async (snum, price, sev, ctx) => {
  const cmt = ctx.message.text
  const session = ctx.session
  ctx.user = await userdb.findOne({ userid: ctx.message.from.id })
  if (session[sev] > 1) {
    const urlR =
      /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)/
    const urlCheck = ctx.message.text.match(urlR)
    if (!urlCheck) {
      ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
      session[sev] = 0
      return
    }
    console.log(
      lang.vk_folow_url
        .replace(/(?<=<).+(?=>)/gm, `$&`)
        .replace("snum", snum)
        .replace("squa", session[sev])
        .replace("url", ctx.message.text)
        .replaceAll(/<|>/g, "")
    )
    const rq = await axios.request(
      lang.vk_folow_url
        .replace(/(?<=<).+(?=>)/gm, `$&`)
        .replace("snum", snum)
        .replace("squa", session[sev])
        .replace("url", ctx.message.text)
        .replaceAll(/<|>/g, "")
    )
    if (!rq.data.order) {
      ctx.reply(`–û—à–∏–±–∫–∞: ${rq.data.Error}`)
      session[sev] = 0
      return
    }
    ctx.user.bal = ctx.user.bal - session[sev] * price
    ctx.user.wrapHist.unshift({ orderid: rq.data.order, date: timestamp })
    ctx.user.save()
    ctx.reply(`–ó–∞–∫–∞–∑ ‚Ññ${rq.data.order} –∑–∞–ø—É—â–µ–Ω`)
    bot.api.sendMessage(
      tea.ADMINGROUP,
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id=${ctx.user.id}">${
        ctx.user.username || "–ë–µ–∑ –ò–º–µ–Ω–∏"
      }</a> –∑–∞–ø—É—Å—Ç–∏–ª –∑–∞–∫–∞–∑ ‚Ññ${rq.data.order} –∑–∞ ${session[sev] * price} ‚ÇΩ`,
      { parse_mode: "HTML" }
    )
    session[sev] = 0
    return
  }
  if (session[sev] > 0) {
    if (ctx.user.bal < cmt * price) {
      ctx.reply("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—É–º–º—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ!")
      session[sev] = 0
      return
    }
    if (Number(cmt)) {
      const cmp = Number(cmt)
      if ((cmp > 500000) | (cmp < 1)) {
        ctx.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        session[sev] = 0
        return
      }
      session[sev] = cmp
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É")
    } else {
      ctx.reply("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
      session[sev] = 0
      return
    }
    return
  }
}

bot.on("message:text", async (ctx) => {
  cmf = ctx.message.from
  ctx.user = await userdb.findOne({ userid: cmf.id })
  if (!ctx.user) return ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start")
  if (ctx.user.acclvl === -1) return ctx.reply("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã")
  const options = { year: "numeric", month: "long", day: "numeric" }
  const conv = (str) => {
    const slon = str
      .replace(/(?<=<).+(?=>)/gm, `$&`)
      .replace("userid", ctx.user.id)
      .replace("username", ctx.user.username)
      .replace("num_pur", ctx.user.num_pur)
      .replace("bal", ctx.user.bal)
      .replace("regdate", ctx.user.regDate.toLocaleDateString("ru-RU", options))
      .replaceAll(/<|>/g, "")
    return slon
  }
  const cmt = ctx.message.text
  const session = ctx.session
  //VK
  nakrutka(351, 0.06 * priceX, "vk_likes", ctx)
  nakrutka(154, 0.04 * priceX, "vk_viewers", ctx)
  nakrutka(350, 0.09 * priceX, "vk_folowers", ctx)
  nakrutka(352, 0.08 * priceX, "vk_repost", ctx)
  //TT
  nakrutka(306, 0.06 * priceX, "tt_likes", ctx)
  nakrutka(300, 0.01 * priceX, "tt_viewers", ctx)
  nakrutka(305, 0.03 * priceX, "tt_folowers", ctx)
  nakrutka(255, 0.5 * priceX, "tt_comments", ctx)
  //Ins
  nakrutka(60, 0.01 * priceX, "ins_likes", ctx)
  nakrutka(147, 0.01 * priceX, "ins_viewers", ctx)
  nakrutka(3, 0.01 * priceX, "ins_folowers", ctx)
  //TG
  nakrutka(2191, 0.01 * priceX, "tg_viewers", ctx)
  nakrutka(400, 0.04 * priceX, "tg_folowers", ctx)
  if (session.coupon > 0) {
    ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ö—É–ø–æ–Ω")
    session.coupon = 0
    return
  }
  if (session.up_bal > 0) {
    if (Number(cmt)) {
      const cmp = Number(cmt)
      if ((cmp > 500000) | (cmp < 0)) {
        ctx.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        session.up_bal = 0
        return
      }
      const coid = await balHisdb.countDocuments()
      const commentid = 183301 + coid
      await balHisdb.create({
        id: ctx.user.id,
        bid: commentid,
        username: cmf.username,
        bal: ctx.user.bal,
        balUp: cmp,
        balUpCond: ctx.user.bal + cmp,
        status: "Pending",
        reqDate: timestamp,
        type: "QIWI",
      })
      cmr = Math.round(cmp * 100) / 100
      let payUrl = qiwi.createFormUrl(Personal.Recipients.QIWINickname, {
        amount: cmr,
        account: "13DEAD",
        blocked: ["account", "comment", "sum"],
        comment: commentid,
      })
      const balUpKeyboard = new InlineKeyboard()
        .url("–ü–µ—Ä–∏–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ (–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)", payUrl)
        .row()
        .text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "check_paym_v")
        .row()
        .text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "check_paym_x")
      ctx.reply(
        lang.up_bal_strings
          .replace(/(?<=<).+(?=>)/gm, `$&`)
          .replace("sum", cmr)
          .replace("name", "13DEAD")
          .replaceAll("transid", commentid)
          .replaceAll(/<|>/g, ""),
        { reply_markup: balUpKeyboard }
      )
      session.up_bal = 0
    } else {
      ctx.reply("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
      session.up_bal = 0
    }
    return
  }
  if (cmt === lang.my_wrap) {
    if (!ctx.user.wrapHist[0])
      return ctx.reply("‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ:\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    const orderid = ctx.user.wrapHist[0].orderid
    const rq = await axios.request(
      `https://wiq.ru/api/?key=${tea.WIQ_TOKEN}&action=status&order=${orderid}`
    )
    const urlParse = rq.data.link.split("/")[3]
    const statusParse =
      rq.data.status == "Completed"
        ? "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        : rq.data.status == "In progress"
        ? "–ê–∫—Ç–∏–≤–µ–Ω‚úÖ"
        : rq.data.status == "Pending"
        ? "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—èüïù"
        : rq.data.status == "Partial"
        ? "–ü—Ä–µ—Ä–≤–∞–Ω‚ùå"
        : rq.data.status == "Canceled"
        ? "–û—Ç–º–µ–Ω–µ–Ω"
        : rq.data.status
    if ((rq.data.status == "Completed") | (rq.data.status == "Canceled"))
      return ctx.reply("‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ:\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    ctx.reply(
      `‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ:\n –ó–∞–∫–∞–∑ ‚Ññ${orderid}\n –°—Ç–∞—Ç—É—Å: ${statusParse}\n –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${
        rq.data.quantity - rq.data.remains
      }/${rq.data.quantity}\n ${rq.data.link}`,
      { disable_web_page_preview: true, parse_mode: "HTML" }
    )
  }
  if (cmt === lang.up_balk) {
    ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    session.up_bal++
  }
  if (cmt === lang.profile) {
    ctx.reply(conv(lang.prof_menu), { reply_markup: prof_menu })
  }
  if (cmt === lang.about_us) {
    ctx.reply(lang.about_us_info, {
      parse_mode: "MarkdownV2",
      reply_markup: keyboard,
    })
  }
  if (cmt === lang.tech_support) {
    ctx.reply(lang.tech_support_test, {
      parse_mode: "MarkdownV2",
      reply_markup: keyboard,
    })
  }
  if (cmt === lang.wrap) {
    ctx.reply("–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:", {
      parse_mode: "MarkdownV2",
      reply_markup: shop_wrap,
    })
    // ctx.replyWithPhoto("https://cdn.discordapp.com/attachments/461187392074940417/935402968004579388/unknown.png", {caption: "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", reply_markup: shop_wrap})
  }
  if (cmt === lang.aval_item) {
    ctx.reply(lang.aval_item_list)
  }
  if (cmt === lang.ref_system) {
    ctx.reply(
      lang.refer
        .replace(/(?<=<).+(?=>)/gm, `$&`)
        .replaceAll("userid", ctx.user.id)
        .replaceAll(/<|>/g, ""),
      { parse_mode: "MarkdownV2", reply_markup: ref_menu }
    )
  }
  if (cmt === lang.rul) {
    ctx.reply(fs.readFileSync("./lang/rul_ru.txt").toString(), {
      reply_markup: keyboard,
    })
  }
})
bot.start()

process.on("uncaughtException", function (err) {
  console.error(err)
  bot.api.sendMessage(tea.ADMINGROUP, `–í –±–æ—Ç–µ –æ—à–∏–±–∫–∞: <code>${err}</code>`, {
    parse_mode: "HTML",
  })
})

//DataBase
mongoose
  .connect(`mongodb://${tea.DBUSER}:${tea.DBPASS}@${tea.SERVER}/${tea.DB}`, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    useFindAndModify: false,
    useCreateIndex: true,
  })
  .then(() => {
    console.log("MongoDB connected!!")
  })
  .catch((err) => {
    console.log("Failed to connect to MongoDB", err)
  })
